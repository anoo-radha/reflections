When would you want to use a remote repository rather than keeping all your work
local?

    I would use remote repository when i want to share my repository to others pubicly. Also when i want to work on a project together, everyone on the project can checkout and commit their changes to a single place.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    I might not be finished with my work to merge the changes and make it public yet

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    branch -- is checking out a commit and making changes to it without affecting the master branch. Once i have tested my change and if it is approved i can amerge it to the master branch.
    clone -- making copy of github repository to my local computer. OR making a copy of my local repository on my local computer
    fork --  making a copy of a github repository on github. If any changes rare done on the forked repository, it will not be reflected in the repository from which i forked. But my forked repository will show a link to the repository from which i forked.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    With the last known state of remote, we can know if any changes have been made to the remote since we pulled. If so then we can pull the updated commits.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    It is harder and maybe done via sending emails to the whole group for every change and doing the merges manually.
    With Git and Github, maybe therez a initial learning curve but it makes merging, collobarating and sharing our code publically much easier. Git and Github makes working as a group in a project maybe even from different locations feasible.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    When i have an feature in mind and want to show a working model of it without affecting or breaking the master code, i can branch it. once it is approved, then i can merge the branch into the master. Also i can work on a feature on a branch and do a bug fix/improvements on the master at the same time without each of these interfering with each other.
    Just commiting to master branch is easier than branching and then merging. But by branching a new feature can be tried out without the fear of breaking the system.

